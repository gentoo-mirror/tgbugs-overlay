diff --git a/pint/__init__.py b/pint/__init__.py
index a6f59c1..718c5a0 100644
--- a/pint/__init__.py
+++ b/pint/__init__.py
@@ -13,8 +13,6 @@
 
 import sys
 
-import pkg_resources
-
 from .context import Context
 from .errors import (
     DefinitionSyntaxError,
@@ -43,7 +41,7 @@ except ImportError:
     _, _pintpandas_error, _ = sys.exc_info()
 
 try:  # pragma: no cover
-    __version__ = pkg_resources.get_distribution("pint").version
+    __version__ = 'PACKAGE_VERSION'
 except Exception:  # pragma: no cover
     # we seem to have a local copy not installed without setuptools
     # so the reported version will be unknown
diff --git a/pint/quantity.py b/pint/quantity.py
index c8fcde3..d5e54b9 100644
--- a/pint/quantity.py
+++ b/pint/quantity.py
@@ -18,8 +18,6 @@ import operator
 import re
 import warnings
 
-from pkg_resources.extern.packaging import version
-
 from .compat import (
     NUMPY_VER,
     _to_magnitude,
@@ -1175,10 +1173,7 @@ class Quantity(PrettyIPython, SharedRegistryObject):
 
     def __matmul__(self, other):
         # Use NumPy ufunc (existing since 1.16) for matrix multiplication
-        if version.parse(NUMPY_VER) >= version.parse("1.16"):
-            return np.matmul(self, other)
-        else:
-            return NotImplemented
+        return np.matmul(self, other)
 
     __rmatmul__ = __matmul__
 
diff --git a/pint/registry.py b/pint/registry.py
index c222346..d027e6f 100644
--- a/pint/registry.py
+++ b/pint/registry.py
@@ -38,16 +38,15 @@ import functools
 import itertools
 import locale
 import os
+import pathlib
 import re
 from collections import ChainMap, defaultdict
-from contextlib import closing, contextmanager
+from contextlib import contextmanager
 from decimal import Decimal
 from fractions import Fraction
 from io import StringIO
 from tokenize import NAME, NUMBER
 
-import pkg_resources
-
 from . import registry_helpers, systems
 from .compat import babel_parse, tokenizer
 from .context import Context, ContextChain
@@ -515,7 +514,7 @@ class BaseRegistry(metaclass=RegistryMeta):
         if isinstance(file, str):
             try:
                 if is_resource:
-                    with closing(pkg_resources.resource_stream(__name__, file)) as fp:
+                    with open(pathlib.Path(__file__).parent / file, 'rb') as fp:
                         rbytes = fp.read()
                     return self.load_definitions(
                         StringIO(rbytes.decode("utf-8")), is_resource
